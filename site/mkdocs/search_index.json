{
    "docs": [
        {
            "location": "/",
            "text": "Welcome to MkDocs\n\n\nFor full documentation visit \nmkdocs.org\n.\n\n\nCommands\n\n\n\n\nmkdocs new [dir-name]\n - Create a new project.\n\n\nmkdocs serve\n - Start the live-reloading docs server.\n\n\nmkdocs build\n - Build the documentation site.\n\n\nmkdocs help\n - Print this help message.\n\n\n\n\nProject layout\n\n\nmkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.",
            "title": "Home"
        },
        {
            "location": "/#welcome-to-mkdocs",
            "text": "For full documentation visit  mkdocs.org .",
            "title": "Welcome to MkDocs"
        },
        {
            "location": "/#commands",
            "text": "mkdocs new [dir-name]  - Create a new project.  mkdocs serve  - Start the live-reloading docs server.  mkdocs build  - Build the documentation site.  mkdocs help  - Print this help message.",
            "title": "Commands"
        },
        {
            "location": "/#project-layout",
            "text": "mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.",
            "title": "Project layout"
        },
        {
            "location": "/ControlVersiones/",
            "text": "## CONTROL DE VERSIONES\n\n\n#### 1.Adem\u00e1s de Git, \u00bfque otros sistemas de control de versiones existen?\n\n\nLos sistemas de control de versiones mas conocidos son: CVS, Subversion, Mercurial y Git\n\n\n#### 2.En Git, \u00bfqu\u00e9 tres \u00e1reas existen?\n\n\n\n\nWorking Directory\n\n\nStaging Area \n\n\nRepository (local o remoto)\n\n\n\n\n3.Busca en Internet un buen tutorial de GIT y real\u00edzalo. \u00bfDe qu\u00e9 tutorial se trata?\n\n\nhttps://youtu.be/tRZGeaHPoaw\n\n\n4.Visualiza el siguiente video y responde a las cuestiones que aparecen m\u00e1s abajo.\n\n\nhttps://www.youtube.com/watch?v=uR6G2v_WsRA\n\n\n5.En Git, \u00bfpara qu\u00e9 sirve el comando \ngit config\n?\n\n\nEl comando git config sirve para definir valores de configuraci\u00f3n, como pueden ser el nombre de usuario o el nombre del email.\n\n\n6.En Git, \u00bfpara qu\u00e9 sirve el comando \ngit init\n?\n\n\nConvierte un repositorio ya creado en un repositorio Git\n\n\n7.En Git, \u00bfpara qu\u00e9 sirve el comando \ngit clone\n?\n\n\nSe usa para copiar un repositorio ya existente en un nuevo repositorio local\n\n\n8.En Git, \u00bfpara qu\u00e9 sirve el comando \ngit status\n?\n\n\nSirve para ver el estado de los ficheros de nuestro proyecto.\n\n\n9.En Git, \u00bfpara qu\u00e9 sirve el comando \ngit add\n?\n\n\nPara agregar los ficheros a la base de datos de git\n\n\n10.En Git, \u00bfpara qu\u00e9 sirve el comando \ngit commit\n?\n\n\nCrea una instant\u00e1nea de los cambios y la guarda en el directorio git.\n\n\n11.En Git, \u00bfpara qu\u00e9 sirve el comando \ngit log\n?\n\n\nTe muestra todos los commits realizados en ese repositorio y listando algunos detalles sobre cada uno\n\n\n12.En Git, \u00bfpara qu\u00e9 sirve el comando \ngit reset HEAD nombrearchivo\n?\n\n\nEl comando \ngit reset HEAD\n retrocede la rama actual,por ejemplo, \ngit reset HEAD~2\n  retrocede 2 confirmaciones, con lo que se elimina de forma eficaz las dos instant\u00e1neas que acabamos de crear a partir del historial del proyecto. \n\n\n13.En Git, \u00bfpara qu\u00e9 sirve el comando \ngit checkout -- nombrearchivo\n?\n\n\npara deshacer los cambios que has hecho en un archivo de tu directorio y trabajo.\n\n\n14.Visualiza el siguiente video y responde a las cuestiones que aparecen m\u00e1s abajo.\n\n\n\n\nhttps://www.youtube.com/watch?v=FyAAIHHClqI\n\n\n\n\n15.En Git, \u00bfpara qu\u00e9 sirve el comando \ngit branch\n?\n\n\nPara ver desde git las ramas que tenemos en nuestro proyecto, y crear nuevas ramas a\u00f1adi\u00e9ndole un nombre para la rama\n\n\n16.En Git, \u00bfpara qu\u00e9 sirve el comando \ngit checkout\n?\n\n\nSirve para poder moverte entre ramas en git\n\n\n17.En Git, \u00bfpara qu\u00e9 sirve el comando \ngit merge\n?\n\n\nPermite tomar las l\u00edneas independientes de desarrollo creadas por \ngit branch\n e integrarlas en una sola rama.\n\n\n18.En Git, explica c\u00f3mo funciona la fusi\u00f3n (merge) de tipo fast-forward.\n\n\nLa herramienta de Fast Forward en Git Merge cuenta con una serie de propiedades y caracter\u00edsticas, dentro de las que se encuentra su utilidad para realizar fusiones de avance r\u00e1pido en las situaciones donde exista un proceso lineal desde el extremo de la rama actual y que se extienda hasta la rama de destino.\n\n\n19.En Git, explica c\u00f3mo funciona la fusi\u00f3n (merge) de tipo 3-way.",
            "title": "ControlVersiones"
        },
        {
            "location": "/ControlVersiones/#3busca-en-internet-un-buen-tutorial-de-git-y-realizalo-de-que-tutorial-se-trata",
            "text": "https://youtu.be/tRZGeaHPoaw",
            "title": "3.Busca en Internet un buen tutorial de GIT y real\u00edzalo. \u00bfDe qu\u00e9 tutorial se trata?"
        },
        {
            "location": "/ControlVersiones/#4visualiza-el-siguiente-video-y-responde-a-las-cuestiones-que-aparecen-mas-abajo",
            "text": "https://www.youtube.com/watch?v=uR6G2v_WsRA",
            "title": "4.Visualiza el siguiente video y responde a las cuestiones que aparecen m\u00e1s abajo."
        },
        {
            "location": "/ControlVersiones/#5en-git-para-que-sirve-el-comando-git-config",
            "text": "El comando git config sirve para definir valores de configuraci\u00f3n, como pueden ser el nombre de usuario o el nombre del email.",
            "title": "5.En Git, \u00bfpara qu\u00e9 sirve el comando git config?"
        },
        {
            "location": "/ControlVersiones/#6en-git-para-que-sirve-el-comando-git-init",
            "text": "Convierte un repositorio ya creado en un repositorio Git",
            "title": "6.En Git, \u00bfpara qu\u00e9 sirve el comando git init?"
        },
        {
            "location": "/ControlVersiones/#7en-git-para-que-sirve-el-comando-git-clone",
            "text": "Se usa para copiar un repositorio ya existente en un nuevo repositorio local",
            "title": "7.En Git, \u00bfpara qu\u00e9 sirve el comando git clone?"
        },
        {
            "location": "/ControlVersiones/#8en-git-para-que-sirve-el-comando-git-status",
            "text": "Sirve para ver el estado de los ficheros de nuestro proyecto.",
            "title": "8.En Git, \u00bfpara qu\u00e9 sirve el comando git status?"
        },
        {
            "location": "/ControlVersiones/#9en-git-para-que-sirve-el-comando-git-add",
            "text": "Para agregar los ficheros a la base de datos de git",
            "title": "9.En Git, \u00bfpara qu\u00e9 sirve el comando git add?"
        },
        {
            "location": "/ControlVersiones/#10en-git-para-que-sirve-el-comando-git-commit",
            "text": "Crea una instant\u00e1nea de los cambios y la guarda en el directorio git.",
            "title": "10.En Git, \u00bfpara qu\u00e9 sirve el comando git commit?"
        },
        {
            "location": "/ControlVersiones/#11en-git-para-que-sirve-el-comando-git-log",
            "text": "Te muestra todos los commits realizados en ese repositorio y listando algunos detalles sobre cada uno",
            "title": "11.En Git, \u00bfpara qu\u00e9 sirve el comando git log?"
        },
        {
            "location": "/ControlVersiones/#12en-git-para-que-sirve-el-comando-git-reset-head-nombrearchivo",
            "text": "El comando  git reset HEAD  retrocede la rama actual,por ejemplo,  git reset HEAD~2   retrocede 2 confirmaciones, con lo que se elimina de forma eficaz las dos instant\u00e1neas que acabamos de crear a partir del historial del proyecto.",
            "title": "12.En Git, \u00bfpara qu\u00e9 sirve el comando git reset HEAD nombrearchivo?"
        },
        {
            "location": "/ControlVersiones/#13en-git-para-que-sirve-el-comando-git-checkout-nombrearchivo",
            "text": "para deshacer los cambios que has hecho en un archivo de tu directorio y trabajo.",
            "title": "13.En Git, \u00bfpara qu\u00e9 sirve el comando git checkout -- nombrearchivo?"
        },
        {
            "location": "/ControlVersiones/#14visualiza-el-siguiente-video-y-responde-a-las-cuestiones-que-aparecen-mas-abajo",
            "text": "https://www.youtube.com/watch?v=FyAAIHHClqI",
            "title": "14.Visualiza el siguiente video y responde a las cuestiones que aparecen m\u00e1s abajo."
        },
        {
            "location": "/ControlVersiones/#15en-git-para-que-sirve-el-comando-git-branch",
            "text": "Para ver desde git las ramas que tenemos en nuestro proyecto, y crear nuevas ramas a\u00f1adi\u00e9ndole un nombre para la rama",
            "title": "15.En Git, \u00bfpara qu\u00e9 sirve el comando git branch?"
        },
        {
            "location": "/ControlVersiones/#16en-git-para-que-sirve-el-comando-git-checkout",
            "text": "Sirve para poder moverte entre ramas en git",
            "title": "16.En Git, \u00bfpara qu\u00e9 sirve el comando git checkout?"
        },
        {
            "location": "/ControlVersiones/#17en-git-para-que-sirve-el-comando-git-merge",
            "text": "Permite tomar las l\u00edneas independientes de desarrollo creadas por  git branch  e integrarlas en una sola rama.",
            "title": "17.En Git, \u00bfpara qu\u00e9 sirve el comando git merge?"
        },
        {
            "location": "/ControlVersiones/#18en-git-explica-como-funciona-la-fusion-merge-de-tipo-fast-forward",
            "text": "La herramienta de Fast Forward en Git Merge cuenta con una serie de propiedades y caracter\u00edsticas, dentro de las que se encuentra su utilidad para realizar fusiones de avance r\u00e1pido en las situaciones donde exista un proceso lineal desde el extremo de la rama actual y que se extienda hasta la rama de destino.",
            "title": "18.En Git, explica c\u00f3mo funciona la fusi\u00f3n (merge) de tipo fast-forward."
        },
        {
            "location": "/ControlVersiones/#19en-git-explica-como-funciona-la-fusion-merge-de-tipo-3-way",
            "text": "",
            "title": "19.En Git, explica c\u00f3mo funciona la fusi\u00f3n (merge) de tipo 3-way."
        },
        {
            "location": "/HerramientasDesarrollo/",
            "text": "HERRAMIENTAS DE DESAROLLO\n\n\n1.Ejecuta el programa \"Hola mundo\" en los siguientes lenguajes:\n\n\n\n\nBash\n\n\n\n\n```bash\n  #!/usr/bin/env bash\n\n\necho \"Hola mundo\"\n  ```\n\n\n\n\nJavascript (nodejs)\n\n\n\n\n```javascript\n  #!/usr/bin/env node\n\n\nconsole.log('Hola mundo');\n  ```\n\n\n\n\nPython\n\n\n\n\n```python\n  #!/usr/bin/env python\n\n\nprint \"Hola Mundo\"\n  ```\n\n\n\n\nC\n\n\n\n\n```c\n  #include \n\n\nint main()\n  {\n      printf(\"\u00a1Hola, mundo!\");\n      return 0;\n  }\n  ```\n\n\n\n\nJava\n\n\n\n\njava\n  class Hola\n  {\n      public static void main(String[] args)\n      {\n          System.out.println(\"Hola Mundo\");\n      }\n  }\n\n\n\n\nEnsamblador (nasm)\n\n\n\n\nsection .data\n\nmsg     db \"\u00a1Hola Mundo!\", 0Ah\nlen     equ     $ - msg  \n\nsection .text\n\nglobal _start\n\n_start:\n        mov     eax, 04h\n        mov     ebx, 01h\n        mov     ecx, msg\n        mov     edx, len\n        int     80h\n        mov     eax, 01h\n        mov     ebx, 00h\n        int     80h\n\n\n\n\n2.Para cada uno de los lenguajes anteriores, indica el proceso realizado para conseguir ejecutar el c\u00f3digo: \u00bfcompilaci\u00f3n o interpretaci\u00f3n?\n\n\n\n\nbash = Interpretado\n\n\npython = Interpretado\n\n\njavascript (nodejs) = Compilado\n\n\nC = Compilado\n\n\njava = Compilado\n\n\nensamblador (nasm) = Compilado\n\n\n\n\n4.Investiga y averigua que extensi\u00f3n tienen los archivos de c\u00f3digo fuente de los siguientes lenguajes:\n\n\n\n\n\n\nbash = .sh\n\n\n\n\n\n\npython = .py\n\n\n\n\n\n\njavascript = .js\n\n\n\n\n\n\nC = .c\n\n\n\n\n\n\njava = .java\n\n\n\n\n\n\nensamblador (nasm) = .asm\n\n\n\n\n\n\n5.Scripts ejecutables para los lenguajes interpretados. Edita los scripts para los siguientes lenguaje\n\n\n\n\nBash - ./hola.sh\n\n\n\n\n```bash\n  #!/usr/bin/env bash\n\n\necho \"Hola mundo\"\n  ```\n\n\n\n\nJavascript (nodejs) ./hola.js\n\n\n\n\n```javascript\n  #!/usr/bin/env node\n\n\nconsole.log('Hola mundo');\n  ```\n\n\n\n\nPython ./hola.py\n\n\n\n\n```python\n  #!/usr/bin/env python\n\n\nprint \"Hola Mundo\"\n  ```\n\n\n\n\nC ./hola    \n\n\n\n\n```c\n  #include \n\n\nint main()\n  {\n      printf(\"\u00a1Hola, mundo!\");\n      return 0;\n  }\n  ```\n\n\n\n\nJava   java  Hola  \n\n\n\n\njava\n  class Hola\n  {\n      public static void main(String[] args)\n      {\n          System.out.println(\"Hola Mundo\");\n      }\n  }\n\n\n\n\nEnsamblador (nasm)  ./hola  \n\n\n\n\nsection .data\n\nmsg     db \"\u00a1Hola Mundo!\", 0Ah\nlen     equ     $ - msg  \n\nsection .text\n\nglobal _start\n\n_start:\n        mov     eax, 04h\n        mov     ebx, 01h\n        mov     ecx, msg\n        mov     edx, len\n        int     80h\n        mov     eax, 01h\n        mov     ebx, 00h\n        int     80h\n\n\n\n\n6. \u00bfQu\u00e9 extensi\u00f3n tienen los archivos de c\u00f3digo objeto?\n\n\nLa extensi\u00f3n es \n.obj\n\n\n7. Lenguaje C. C\u00f3digo en varios archivos. Obtener el c\u00f3digo objeto a partir del c\u00f3digo fuente de los 3 archivos siguientes:\n\n\n//-------------\n// datos.c\n//-------------\n\nchar *mensaje=\"Hola a todos y todas\";\nint  num1 = 8;\nint  num2 = 10;\n//-------------\n// suma.c\n//-------------\n\nint suma (int a, int b) {\n  return a + b;\n}\n//-------------\n// main.c\n//-------------\n\n#include <stdio.h>\n\nint suma (int a, int b);\n\nextern char *mensaje;\nextern int  num1, num2;\n\nint main(){\n  printf(\"%s\\n\", mensaje);\n  printf(\"%d\\n\", suma (num1, num2) );\n  return 0;\n}\n\n\n\n\n8. Lenguaje C. C\u00f3digo en varios archivos. Obtener el c\u00f3digo binario ejecutable a partir del c\u00f3digo objeto de los 3 archivos anteriores:\n\n\ngcc  -o  programa  main.o  datos.o  suma.o\n\n\n\n\n11. Bibliotecas. Define que se entiende por biblioteca o librer\u00eda y los tipos que existen.\n\n\nLas librer\u00edas de programaci\u00f3n son conjuntos de archivos de c\u00f3digo que se utilizan para desarrollar software. Su objetivo es facilitar la programaci\u00f3n, al proporcionar funcionalidades comunes, que ya han sido resueltas previamente por otros programadores.\n\n\nExisten librer\u00edas est\u00e1ticas y librer\u00edas din\u00e1micas.\n\n\n12. Bibliotecas. \u00bfQu\u00e9 tipo es el m\u00e1s utilizado actualmente? \u00bfPor qu\u00e9?\n\n\nLas mas usadas son las librerias din\u00e1micas.\n\n\n13. Bibliotecas. Crea una biblioteca din\u00e1mica en C que proporcione las funciones para sumar, restar, multiplicar y dividir 2 n\u00fameros enteros. Crea un programa que haga uso de ella y comprueba que se ejecuta correctamente.\n\n\nint suma (int sumando1, int sumando2);\n\nint resta  (int minuendo, int sustraendo);\n\nint multiplicacion (int  numero1, int numero2);\n\nfloat division (int dividendo, int divisor);\n\n\n\n\n14. Bibliotecas. Crea una biblioteca din\u00e1mica en Java que proporcione las funciones para sumar, restar, multiplicar y dividir 2 n\u00fameros enteros. Crea un programa que haga uso de ella y comprueba que se ejecuta correctamente.\n\n\nint suma (int sumando1, int sumando2) {\n    return (sumando1+sumando2);\n}\n\n\nint resta  (int minuendo, int sustraendo) {\n    return (minuendo-sustraendo);\n}\n\n\nint multiplicacion (int  numero1, int numero2) {\n    return (numero1*numero2);\n}\n\n\nfloat division (int dividendo, int divisor) {\n    return (dividendo/(float)divisor);\n}\n\n\n\n\n15. Bibliotecas. Busca informaci\u00f3n y explica las ventajas y desventajas de usar bibliotecas est\u00e1ticas.\n\n\nVentajas:\n\n\n\n\n\n\nNo es necesario proporcionar las bibliotecas correspondientes al publicar el programa.\n\n\n\n\n\n\nBiblioteca de carga r\u00e1pida\n\n\n\n\n\n\nDesventajas:\n\n\n\n\n\n\nLa biblioteca est\u00e1 empaquetada en la aplicaci\u00f3n, lo que resulta en una gran biblioteca.\n\n\n\n\n\n\nLa biblioteca ha cambiado y es necesario volver a compilar el programa.\n\n\n\n\n\n\n16. Bibliotecas. Busca informaci\u00f3n y explica las ventajas y desventajas de usar bibliotecas din\u00e1micas.\n\n\nVentajas\n\n\n1) Ahorre m\u00e1s memoria y reduzca el intercambio de p\u00e1ginas;\n2) El archivo so es independiente del archivo EXE, siempre que la interfaz de salida permanezca igual (es decir, el nombre, los par\u00e1metros, el tipo de valor de retorno y la convenci\u00f3n de llamada no cambien), reemplazar el archivo so no causar\u00e1 el archivo EXE Cualquier impacto, mejorando as\u00ed la capacidad de mantenimiento y la escalabilidad;\n3) Los programas escritos en diferentes lenguajes de programaci\u00f3n pueden llamar a la misma para que funcionen siempre que sigan la convenci\u00f3n de llamada de funci\u00f3n;\n4) Es adecuado para el desarrollo de software a gran escala, lo que hace que el proceso de desarrollo sea independiente y menos acoplado, lo que es conveniente para el desarrollo y las pruebas entre diferentes desarrolladores y organizaciones de desarrollo.\n\n\nDesventajas\n\n\n1) El archivo ejecutable generado por el enlace est\u00e1tico es de gran tama\u00f1o y contiene el mismo c\u00f3digo com\u00fan, lo que causa desperdicio;\n2) La aplicaci\u00f3n que usa la biblioteca de enlaces din\u00e1micos no es aut\u00f3noma, y el m\u00f3dulo del que depende tambi\u00e9n debe existir. Si usa enlaces din\u00e1micos al cargar, la DLL no existe cuando se inicia el programa. El sistema terminar\u00e1 el programa y dar\u00e1 un mensaje de error. Con el enlace din\u00e1mico en tiempo de ejecuci\u00f3n, el sistema no terminar\u00e1, pero debido a que la funci\u00f3n exportada no est\u00e1 disponible, el programa no se cargar\u00e1; la velocidad es m\u00e1s lenta que el enlace est\u00e1tico. Despu\u00e9s de actualizar un determinado m\u00f3dulo, si el nuevo m\u00f3dulo no es compatible con el m\u00f3dulo anterior, se arrancar\u00e1 todo el software que necesita el m\u00f3dulo para ejecutarse.\n\n\n17. Build. Automatiza el proceso de compilaci\u00f3n de ejecutable y biblioteca, su enlazado y la generaci\u00f3n del archivo ejecutable para c\u00f3digo fuente en C con make. Haz uso de un buildfile.\n\n\n18. Build. Automatiza el proceso de compilaci\u00f3n de ejecutable y biblioteca, su enlazado y la generaci\u00f3n del archivo .jar para c\u00f3digo fuente en Java con Ant. Haz uso de un buildfile.",
            "title": "HerramientasDesarrollo"
        },
        {
            "location": "/HerramientasDesarrollo/#herramientas-de-desarollo",
            "text": "",
            "title": "HERRAMIENTAS DE DESAROLLO"
        },
        {
            "location": "/HerramientasDesarrollo/#1ejecuta-el-programa-hola-mundo-en-los-siguientes-lenguajes",
            "text": "Bash   ```bash\n  #!/usr/bin/env bash  echo \"Hola mundo\"\n  ```   Javascript (nodejs)   ```javascript\n  #!/usr/bin/env node  console.log('Hola mundo');\n  ```   Python   ```python\n  #!/usr/bin/env python  print \"Hola Mundo\"\n  ```   C   ```c\n  #include   int main()\n  {\n      printf(\"\u00a1Hola, mundo!\");\n      return 0;\n  }\n  ```   Java   java\n  class Hola\n  {\n      public static void main(String[] args)\n      {\n          System.out.println(\"Hola Mundo\");\n      }\n  }   Ensamblador (nasm)   section .data\n\nmsg     db \"\u00a1Hola Mundo!\", 0Ah\nlen     equ     $ - msg  \n\nsection .text\n\nglobal _start\n\n_start:\n        mov     eax, 04h\n        mov     ebx, 01h\n        mov     ecx, msg\n        mov     edx, len\n        int     80h\n        mov     eax, 01h\n        mov     ebx, 00h\n        int     80h",
            "title": "1.Ejecuta el programa \"Hola mundo\" en los siguientes lenguajes:"
        },
        {
            "location": "/HerramientasDesarrollo/#2para-cada-uno-de-los-lenguajes-anteriores-indica-el-proceso-realizado-para-conseguir-ejecutar-el-codigo-compilacion-o-interpretacion",
            "text": "bash = Interpretado  python = Interpretado  javascript (nodejs) = Compilado  C = Compilado  java = Compilado  ensamblador (nasm) = Compilado",
            "title": "2.Para cada uno de los lenguajes anteriores, indica el proceso realizado para conseguir ejecutar el c\u00f3digo: \u00bfcompilaci\u00f3n o interpretaci\u00f3n?"
        },
        {
            "location": "/HerramientasDesarrollo/#4investiga-y-averigua-que-extension-tienen-los-archivos-de-codigo-fuente-de-los-siguientes-lenguajes",
            "text": "bash = .sh    python = .py    javascript = .js    C = .c    java = .java    ensamblador (nasm) = .asm",
            "title": "4.Investiga y averigua que extensi\u00f3n tienen los archivos de c\u00f3digo fuente de los siguientes lenguajes:"
        },
        {
            "location": "/HerramientasDesarrollo/#5scripts-ejecutables-para-los-lenguajes-interpretados-edita-los-scripts-para-los-siguientes-lenguaje",
            "text": "Bash - ./hola.sh   ```bash\n  #!/usr/bin/env bash  echo \"Hola mundo\"\n  ```   Javascript (nodejs) ./hola.js   ```javascript\n  #!/usr/bin/env node  console.log('Hola mundo');\n  ```   Python ./hola.py   ```python\n  #!/usr/bin/env python  print \"Hola Mundo\"\n  ```   C ./hola       ```c\n  #include   int main()\n  {\n      printf(\"\u00a1Hola, mundo!\");\n      return 0;\n  }\n  ```   Java   java  Hola     java\n  class Hola\n  {\n      public static void main(String[] args)\n      {\n          System.out.println(\"Hola Mundo\");\n      }\n  }   Ensamblador (nasm)  ./hola     section .data\n\nmsg     db \"\u00a1Hola Mundo!\", 0Ah\nlen     equ     $ - msg  \n\nsection .text\n\nglobal _start\n\n_start:\n        mov     eax, 04h\n        mov     ebx, 01h\n        mov     ecx, msg\n        mov     edx, len\n        int     80h\n        mov     eax, 01h\n        mov     ebx, 00h\n        int     80h",
            "title": "5.Scripts ejecutables para los lenguajes interpretados. Edita los scripts para los siguientes lenguaje"
        },
        {
            "location": "/HerramientasDesarrollo/#6-que-extension-tienen-los-archivos-de-codigo-objeto",
            "text": "La extensi\u00f3n es  .obj",
            "title": "6. \u00bfQu\u00e9 extensi\u00f3n tienen los archivos de c\u00f3digo objeto?"
        },
        {
            "location": "/HerramientasDesarrollo/#7-lenguaje-c-codigo-en-varios-archivos-obtener-el-codigo-objeto-a-partir-del-codigo-fuente-de-los-3-archivos-siguientes",
            "text": "//-------------\n// datos.c\n//-------------\n\nchar *mensaje=\"Hola a todos y todas\";\nint  num1 = 8;\nint  num2 = 10;\n//-------------\n// suma.c\n//-------------\n\nint suma (int a, int b) {\n  return a + b;\n}\n//-------------\n// main.c\n//-------------\n\n#include <stdio.h>\n\nint suma (int a, int b);\n\nextern char *mensaje;\nextern int  num1, num2;\n\nint main(){\n  printf(\"%s\\n\", mensaje);\n  printf(\"%d\\n\", suma (num1, num2) );\n  return 0;\n}",
            "title": "7. Lenguaje C. C\u00f3digo en varios archivos. Obtener el c\u00f3digo objeto a partir del c\u00f3digo fuente de los 3 archivos siguientes:"
        },
        {
            "location": "/HerramientasDesarrollo/#8-lenguaje-c-codigo-en-varios-archivos-obtener-el-codigo-binario-ejecutable-a-partir-del-codigo-objeto-de-los-3-archivos-anteriores",
            "text": "gcc  -o  programa  main.o  datos.o  suma.o",
            "title": "8. Lenguaje C. C\u00f3digo en varios archivos. Obtener el c\u00f3digo binario ejecutable a partir del c\u00f3digo objeto de los 3 archivos anteriores:"
        },
        {
            "location": "/HerramientasDesarrollo/#11-bibliotecas-define-que-se-entiende-por-biblioteca-o-libreria-y-los-tipos-que-existen",
            "text": "Las librer\u00edas de programaci\u00f3n son conjuntos de archivos de c\u00f3digo que se utilizan para desarrollar software. Su objetivo es facilitar la programaci\u00f3n, al proporcionar funcionalidades comunes, que ya han sido resueltas previamente por otros programadores.  Existen librer\u00edas est\u00e1ticas y librer\u00edas din\u00e1micas.",
            "title": "11. Bibliotecas. Define que se entiende por biblioteca o librer\u00eda y los tipos que existen."
        },
        {
            "location": "/HerramientasDesarrollo/#12-bibliotecas-que-tipo-es-el-mas-utilizado-actualmente-por-que",
            "text": "Las mas usadas son las librerias din\u00e1micas.",
            "title": "12. Bibliotecas. \u00bfQu\u00e9 tipo es el m\u00e1s utilizado actualmente? \u00bfPor qu\u00e9?"
        },
        {
            "location": "/HerramientasDesarrollo/#13-bibliotecas-crea-una-biblioteca-dinamica-en-c-que-proporcione-las-funciones-para-sumar-restar-multiplicar-y-dividir-2-numeros-enteros-crea-un-programa-que-haga-uso-de-ella-y-comprueba-que-se-ejecuta-correctamente",
            "text": "int suma (int sumando1, int sumando2);\n\nint resta  (int minuendo, int sustraendo);\n\nint multiplicacion (int  numero1, int numero2);\n\nfloat division (int dividendo, int divisor);",
            "title": "13. Bibliotecas. Crea una biblioteca din\u00e1mica en C que proporcione las funciones para sumar, restar, multiplicar y dividir 2 n\u00fameros enteros. Crea un programa que haga uso de ella y comprueba que se ejecuta correctamente."
        },
        {
            "location": "/HerramientasDesarrollo/#14-bibliotecas-crea-una-biblioteca-dinamica-en-java-que-proporcione-las-funciones-para-sumar-restar-multiplicar-y-dividir-2-numeros-enteros-crea-un-programa-que-haga-uso-de-ella-y-comprueba-que-se-ejecuta-correctamente",
            "text": "int suma (int sumando1, int sumando2) {\n    return (sumando1+sumando2);\n}\n\n\nint resta  (int minuendo, int sustraendo) {\n    return (minuendo-sustraendo);\n}\n\n\nint multiplicacion (int  numero1, int numero2) {\n    return (numero1*numero2);\n}\n\n\nfloat division (int dividendo, int divisor) {\n    return (dividendo/(float)divisor);\n}",
            "title": "14. Bibliotecas. Crea una biblioteca din\u00e1mica en Java que proporcione las funciones para sumar, restar, multiplicar y dividir 2 n\u00fameros enteros. Crea un programa que haga uso de ella y comprueba que se ejecuta correctamente."
        },
        {
            "location": "/HerramientasDesarrollo/#15-bibliotecas-busca-informacion-y-explica-las-ventajas-y-desventajas-de-usar-bibliotecas-estaticas",
            "text": "Ventajas:    No es necesario proporcionar las bibliotecas correspondientes al publicar el programa.    Biblioteca de carga r\u00e1pida    Desventajas:    La biblioteca est\u00e1 empaquetada en la aplicaci\u00f3n, lo que resulta en una gran biblioteca.    La biblioteca ha cambiado y es necesario volver a compilar el programa.",
            "title": "15. Bibliotecas. Busca informaci\u00f3n y explica las ventajas y desventajas de usar bibliotecas est\u00e1ticas."
        },
        {
            "location": "/HerramientasDesarrollo/#16-bibliotecas-busca-informacion-y-explica-las-ventajas-y-desventajas-de-usar-bibliotecas-dinamicas",
            "text": "Ventajas  1) Ahorre m\u00e1s memoria y reduzca el intercambio de p\u00e1ginas;\n2) El archivo so es independiente del archivo EXE, siempre que la interfaz de salida permanezca igual (es decir, el nombre, los par\u00e1metros, el tipo de valor de retorno y la convenci\u00f3n de llamada no cambien), reemplazar el archivo so no causar\u00e1 el archivo EXE Cualquier impacto, mejorando as\u00ed la capacidad de mantenimiento y la escalabilidad;\n3) Los programas escritos en diferentes lenguajes de programaci\u00f3n pueden llamar a la misma para que funcionen siempre que sigan la convenci\u00f3n de llamada de funci\u00f3n;\n4) Es adecuado para el desarrollo de software a gran escala, lo que hace que el proceso de desarrollo sea independiente y menos acoplado, lo que es conveniente para el desarrollo y las pruebas entre diferentes desarrolladores y organizaciones de desarrollo.  Desventajas  1) El archivo ejecutable generado por el enlace est\u00e1tico es de gran tama\u00f1o y contiene el mismo c\u00f3digo com\u00fan, lo que causa desperdicio;\n2) La aplicaci\u00f3n que usa la biblioteca de enlaces din\u00e1micos no es aut\u00f3noma, y el m\u00f3dulo del que depende tambi\u00e9n debe existir. Si usa enlaces din\u00e1micos al cargar, la DLL no existe cuando se inicia el programa. El sistema terminar\u00e1 el programa y dar\u00e1 un mensaje de error. Con el enlace din\u00e1mico en tiempo de ejecuci\u00f3n, el sistema no terminar\u00e1, pero debido a que la funci\u00f3n exportada no est\u00e1 disponible, el programa no se cargar\u00e1; la velocidad es m\u00e1s lenta que el enlace est\u00e1tico. Despu\u00e9s de actualizar un determinado m\u00f3dulo, si el nuevo m\u00f3dulo no es compatible con el m\u00f3dulo anterior, se arrancar\u00e1 todo el software que necesita el m\u00f3dulo para ejecutarse.",
            "title": "16. Bibliotecas. Busca informaci\u00f3n y explica las ventajas y desventajas de usar bibliotecas din\u00e1micas."
        },
        {
            "location": "/HerramientasDesarrollo/#17-build-automatiza-el-proceso-de-compilacion-de-ejecutable-y-biblioteca-su-enlazado-y-la-generacion-del-archivo-ejecutable-para-codigo-fuente-en-c-con-make-haz-uso-de-un-buildfile",
            "text": "",
            "title": "17. Build. Automatiza el proceso de compilaci\u00f3n de ejecutable y biblioteca, su enlazado y la generaci\u00f3n del archivo ejecutable para c\u00f3digo fuente en C con make. Haz uso de un buildfile."
        },
        {
            "location": "/HerramientasDesarrollo/#18-build-automatiza-el-proceso-de-compilacion-de-ejecutable-y-biblioteca-su-enlazado-y-la-generacion-del-archivo-jar-para-codigo-fuente-en-java-con-ant-haz-uso-de-un-buildfile",
            "text": "",
            "title": "18. Build. Automatiza el proceso de compilaci\u00f3n de ejecutable y biblioteca, su enlazado y la generaci\u00f3n del archivo .jar para c\u00f3digo fuente en Java con Ant. Haz uso de un buildfile."
        },
        {
            "location": "/LenguajesProgramacion/",
            "text": "# Lenguajes de programaci\u00f3n\n ### 1.\u00bfQu\u00e9 diferencia existe entre los lenguajes declarativos y los imperativos?. Nombra al menos 2 de cada tipo.\nLos lenguajes de programaci\u00f3n suelen tener 2 formas:\n\n\n\n\nIMPERATIVO: es decir, como una secuencia de operaciones a realizar.\n\n\nDECLARATIVO: es decir, se especifica el resultado deseado, no c\u00f3mo lograrlo.\n\n\n\n\n### 2.Explica qu\u00e9 es compilar? \u00bfExplica qu\u00e9 es interpretar?\n- Un int\u00e9rprete es un programa inform\u00e1tico que procesa el c\u00f3digo fuente de un proyecto de software durante su tiempo de ejecuci\u00f3n.\n- Un compilador es un programa inform\u00e1tico que traduce todo el c\u00f3digo fuente de un proyecto de software a c\u00f3digo m\u00e1quina antes de ejecutarlo. \n\n\n### 3.Ventajas de los lenguajes compilados.\n - Suelen ser m\u00e1s r\u00e1pidos y m\u00e1s eficientes al ejecutarse en comparaci\u00f3n con los lenguajes interpretados. \n - Tambi\u00e9n le dan al desarrollador m\u00e1s control sobre aspectos del hardware, como la gesti\u00f3n de memoria y el uso del CPU.\n\n\n### 4.Ventajas de los lenguajes interpretados.\n - Multiplataforma. El int\u00e9rprete suele estar en varios sistemas operativos, as\u00ed que no tienes que adaptar tu c\u00f3digo a una plataforma en concreto.\n - Portabilidad. El mismo programa puede llevarse a diferentes plataformas.\n - Aumento del rendimiento. Esto es una ventaja medias, pero si que lo vemos en entornos web. Los lenguajes interpretados como JavaScript, se ejecutan en el navegador cliente, lo que hace disminuir la carga de trabajo del servidor web.\n\n\n### 5 Nombra 2 lenguajes compilados y otros 2 interpretados.\n- Interpretados: Ruby y JavaScript\n- Compilados: C++ y Go\n\n\n### 6 \u00bfPuede considerarse c\u00f3digo objeto el bytecode generado en Java tras la compilaci\u00f3n? Explica la respuesta.\n\n\n### 7 Pon un ejemplo de lenguaje de los siguientes tipos:\n\n\n\n\nBajo nivel: Arquitectura CISC\n\n\nNivel medio: C Basic\n\n\nAlto nivel: C++\n\n\n\n\n### 8 \u00bfQu\u00e9 paradigma de programaci\u00f3n siguen los siguientes lenguajes?\n\n\n\n\nC = Imperativo\n\n\nC++ = Imperativo\n\n\nSQL = Multiparadigma\n\n\nJava = Orientado a objetos, imperativo\n\n\nJavascript = Multiparadigma\n\n\nLisp = Declarativo\n\n\nProlog = Logico\n\n\n\n\n### 9 Explica qu\u00e9 criterios pueden seguirse a la hora de elegir un lenguaje de programaci\u00f3n para el desarrollo software.\n 1. Tipo de aplicaci\u00f3n.\n 2. Plataforma dirigida.\n 3. Mantenibilidad.\n 4. Escalabilidad y rendimiento.\n 5. Seguridad.\n 6. Apoyo comunitario.\n 7. L\u00edmite de tiempo de desarrollo.",
            "title": "LenguajesProgramacion"
        },
        {
            "location": "/PruebasUnitarias/",
            "text": "1.Define \"Ciclo de vida del software\".\n\n\nSe puede definir el ciclo de vida del software como las fases que se siguen para la desarollaci\u00f3n de un Software\n\n\n### 2.Nombra las fases principales del desarrollo de software y explica brevemente que se hace en cada una de ellas.\nLas fases principales son:\n- Analisis: Se determinan las necesidades del cliente y los requisitos necesarios para el software\n- Dise\u00f1o: En esta fase se estudian posibles opciones de implementaci\u00f3n para el software que hay que construir, as\u00ed como decidir la estructura general del mismo\n- Codificaci\u00f3n: Se escribe el codigo fuente de cada componente\n- Pruebas: Como errar es humano, la fase de pruebas del ciclo de vida del software busca detectar los fallos cometidos en las etapas anteriores para corregirlos. Por supuesto, lo ideal es hacerlo antes de que el usuario final se los encuentre. \n- Mantenimiento: Esta es una de las fases m\u00e1s importantes del ciclo de vida de desarrollo del software. Puesto que el software ni se rompe ni se desgasta con el uso, su mantenimiento incluye tres puntos diferenciados:\n   - Eliminar los defectos detectados durante su vida \u00fatil (mantenimiento correctivo).\n   - Adaptarlo a nuevas necesidades (mantenimiento adaptativo).\n   - A\u00f1adirle nuevas funcionalidades (mantenimiento perfectivo).\n\n\n### 3.Explica brevemente en qu\u00e9 consiste el modelo en cascada cuando hablamos de desarrollo de software.\n Es un modelo de desarollo de software que consiste en realizar las fases principales en el siguiente orden:\n - Analisis - Dise\u00f1o - Codificaci\u00f3n - Pruebas - Mantenimiento\n\n\n### 4.Ventajas e inconvenientes del modelo en cascada.\n #### Desventajas:\n - Se adapta mal al cambio continuo de especificaciones.\n - Al ir en orden, si las fases anteriores estan mal se puede complicar la fase de ejecuci\u00f3n.\n\n\n#### Ventajas:\n - Es un modelo facil de implementar.\n - La cantidad de recursos para utilizar este modelo es minimo.\n - Existen diferentes variantes con mayor o menor cantidad de actividades.\n\n\n### 5.\u00bfQu\u00e9 se entiende por verificaci\u00f3n? \u00bfY por validaci\u00f3n?\n  - La verificaci\u00f3n es comprobar que el software cumple los requisitos funcionales y no funcionales de su especificaci\u00f3n\n  - La validaci\u00f3n es comprobar que el software cumple las caracteristicas del software\n\n\n### 6.Explica como funciona el modelo de desarrollo mediante creaci\u00f3n de prototipos.\nUn modelo prototipo o modelo de desarrollo evolutivo es utilizado principalmente en el desarrollo de software para ofrecer al usuario una visi\u00f3n previa de c\u00f3mo ser\u00e1 el programa o sistema. Se le dice de desarrollo evolutivo al modelo de prototipo porque evoluciona hasta convertirse en el producto final.\nEn un modelo de prototipos las caracter\u00edsticas fundamentales son:\n\n\n\n\nTiempo. El prototipo se desarrolla en menos tiempo para poder ser probado o testeado.\n\n\nCoste. La inversi\u00f3n en un modelo de prototipo es ajustada, lo que requiere un uso \u00f3ptimo de los recursos.\n\n\nConciso. El prototipo debe incluir los requisitos y caracter\u00edsticas b\u00e1sicas de la aplicaci\u00f3n para poder evaluar su funcionamiento y utilidad.\n\n\nEvolutivo. El prototipo evoluciona gracias a la interacci\u00f3n con los usuarios.\n\n\nFuncional. El prototipo es una aplicaci\u00f3n que funciona.\n\n\n\n\n### 1.KANBAN. Haz un resumen de la metodolog\u00eda Kanban e indica sus diferencias frente a SCRUM. Puedes consultar el siguiente enlace.\n  Kanban utiliza un sistema de tarjetas en un tablero para organizar las tareas en \"To do\" \"Doing\" \"Done\",as\u00ed todos pueden ver el estado en que esta dicha   tarea y saber por donde debe empezar, ademas se controla por demanda. Las diferencias con Scrum son estas:\n  - En kanban no existen roles mientras que en scrum hace falta un el Product Owner y un Scrum Master, aparte del equipo de desarollo\n  - En Scrum se trabaja con iteraciones de tiempo fijo, con unos ciclos fijos que se denominan Sprints\n  - En Scrum los tableros se van a resetear al final de cada Sprint, es decir, conforme vamos finalizando el mismo, el tablero queda vac\u00edo y comenzamos de\nnuevo a\u00f1adir nueva nuevas historias de usuario, las siguientes en prioridad\n  - En Scrum se mide todo lo que sea necesario, se miden historias, es decir, se mide cu\u00e1nto tiempo o esfuerzo nos va a llevar realizar cada una de las     tareas y se mide tambi\u00e9n la velocidad del equipo, en Kanban no hace falta.\n  - En Scrum el conjunto de tareas que tenemos que realizar durante el Sprint, tiene que tener al menos el tama\u00f1o de un Sprint. En Kanban, al tener un ritmo de trabajo continuo, lo que se hace es ir arrastrando las nuevas tareas por el panel hasta que lleguen a su estado final y finalicen.\n\n\n### 2 SCRUM. Explica como funciona Scrum.\n  - Planificaci\u00f3n: El Product Backlog es la fase en la que se establecen las tareas prioritarias y donde se obtiene informaci\u00f3n breve y detallada sobre el proyecto que se va  a desarrollar.\n  - Ejecuci\u00f3n: Sprint: Dentro del m\u00e9todo Scrum, el Sprint es el coraz\u00f3n, un intervalo de tiempo que como m\u00e1ximo tiene una duraci\u00f3n de un mes y en donde se produce el desarrollo de un producto que es entregable potencialmente.\n  -Control: El Burn Down es la fase en la que se mide el progreso de un determinado proyecto Scrum. En ella, el Scrum Master ser\u00e1 el encargado de actualizar los gr\u00e1ficos cuando se finalice cada uno de los Sprint.\n\n\n### 3.SCRUM. Define los siguientes t\u00e9rminos:\n  - Product backlog: (o pila de producto) es un listado de todas las tareas que se pretenden hacer durante el desarrollo de un proyecto.\n\n\n\n\nSprint Backlog: es la suma de el Objetivo del Sprint, los elementos del Product Backlog elegidos para el Sprint, m\u00e1s un plan de acci\u00f3n de c\u00f3mo crear el     Incremento de Producto.\n\n\n\n\n### 4. SCRUM. En la terminolog\u00eda Scrum qu\u00e9 terminos se utilizan como sin\u00f3nimo de:\n - Jefe de proyecto: Scrum Master\n - Cliente: Product Owner\n - Equipo de desarrollo: Scrum Team\n\n\n### 5.SCRUM. Haz un resumen de los requisitos para poder utilizar Scrum.\n  - Cultura de empresa basada en trabajo en equipo, delegaci\u00f3n, creatividad y mejora continua.\n  - Compromiso del cliente en la direcci\u00f3n de los resultados del proyecto, gesti\u00f3n del ROI y disponibilidad para poder colaborar.\n  - Compromiso de la Direcci\u00f3n de la organizaci\u00f3n para resolver problemas end\u00e9micos y realizar cambios organizativos, formando equipos autogestionados y   multidisciplinares y fomentando una cultura de gesti\u00f3n basada en la colaboraci\u00f3n y en la facilitaci\u00f3n llevada a cabo por l\u00edderes al servicio del equipo.\n  -  Compromiso conjunto y colaboraci\u00f3n de los miembros del equipo.\n  -  Relaci\u00f3n entre proveedor y cliente basada en ganar-ganar, colaboraci\u00f3n y transparencia.\n  -  Facilidad para realizar cambios en el proyecto.\n  -  Tama\u00f1o de cada equipo entre 5 y 9 personas (con t\u00e9cnicas espec\u00edficas de planificaci\u00f3n y coordinaci\u00f3n cuando varios equipos trabajan en el mismo proyecto).\n  -  Equipo trabajando en un mismo espacio com\u00fan para maximizar la comunicaci\u00f3n.\n  -  Dedicaci\u00f3n del equipo a tiempo completo.\n  -  Estabilidad de los miembros del equipo\n\n\n### 6.XP. Explica los 5 valores de la Programaci\u00f3n Extrema.\n  - Comunicaci\u00f3n: Con objetivo de romper las cl\u00e1sicas barreras entre negocio y desarrollo, XP promueve que los requisitos sean comunicados y trabajados con el equipo de desarrollo mano a mano y no a trav\u00e9s de documentaci\u00f3n\n  - Simplicidad: La l\u00ednea de XP respecto a la complejidad de las soluciones es tajante: empezar con la soluci\u00f3n m\u00e1s simple. \u00bfSe podr\u00eda realizar alguna funcionalidad extra fuera de lo m\u00ednimo que da valor? Pues se realizar\u00e1 m\u00e1s tarde\n  - Feedback: De nuevo, comunicaci\u00f3n, y no solo con el cliente, sino en todas direcciones. Feedback es un valor constante en XP y gran parte de sus pr\u00e1cticas van en esta direcci\u00f3n.\n  - Coraje / Valentia: eXtreme Programming se considera una disciplina: un conjunto de pr\u00e1cticas que se compensan entre ellas bajo el mismo paraguas. Y para ser realmente \"extreme\" debes cumplirla todas,\n  - Respeto: Adem\u00e1s, XP promueve algo tan b\u00e1sico como el respeto\n\n\n### 7. XP. \u00bfCu\u00e1les son las caracter\u00edsticas distintivas de XP frente a otras metodolog\u00edas \u00e1giles? Expl\u00edcalas.\nEn otras metodolog\u00edas se recoge las buenas pr\u00e1cticas de un marco de trabajo espec\u00edfico. En ella, hay unos roles de equipo definidos y unas iteraciones que se van repitiendo cada semana o 3-5 semanas.\nLa metodolog\u00eda XP se centra en la comunicaci\u00f3n con todos los involucrados en el proyectos, as\u00ed como la reutilizaci\u00f3n del c\u00f3digo ya desarrollado y la realimentaci\u00f3n.",
            "title": "PruebasUnitarias"
        },
        {
            "location": "/PruebasUnitarias/#1define-ciclo-de-vida-del-software",
            "text": "Se puede definir el ciclo de vida del software como las fases que se siguen para la desarollaci\u00f3n de un Software  ### 2.Nombra las fases principales del desarrollo de software y explica brevemente que se hace en cada una de ellas.\nLas fases principales son:\n- Analisis: Se determinan las necesidades del cliente y los requisitos necesarios para el software\n- Dise\u00f1o: En esta fase se estudian posibles opciones de implementaci\u00f3n para el software que hay que construir, as\u00ed como decidir la estructura general del mismo\n- Codificaci\u00f3n: Se escribe el codigo fuente de cada componente\n- Pruebas: Como errar es humano, la fase de pruebas del ciclo de vida del software busca detectar los fallos cometidos en las etapas anteriores para corregirlos. Por supuesto, lo ideal es hacerlo antes de que el usuario final se los encuentre. \n- Mantenimiento: Esta es una de las fases m\u00e1s importantes del ciclo de vida de desarrollo del software. Puesto que el software ni se rompe ni se desgasta con el uso, su mantenimiento incluye tres puntos diferenciados:\n   - Eliminar los defectos detectados durante su vida \u00fatil (mantenimiento correctivo).\n   - Adaptarlo a nuevas necesidades (mantenimiento adaptativo).\n   - A\u00f1adirle nuevas funcionalidades (mantenimiento perfectivo).  ### 3.Explica brevemente en qu\u00e9 consiste el modelo en cascada cuando hablamos de desarrollo de software.\n Es un modelo de desarollo de software que consiste en realizar las fases principales en el siguiente orden:\n - Analisis - Dise\u00f1o - Codificaci\u00f3n - Pruebas - Mantenimiento  ### 4.Ventajas e inconvenientes del modelo en cascada.\n #### Desventajas:\n - Se adapta mal al cambio continuo de especificaciones.\n - Al ir en orden, si las fases anteriores estan mal se puede complicar la fase de ejecuci\u00f3n.  #### Ventajas:\n - Es un modelo facil de implementar.\n - La cantidad de recursos para utilizar este modelo es minimo.\n - Existen diferentes variantes con mayor o menor cantidad de actividades.  ### 5.\u00bfQu\u00e9 se entiende por verificaci\u00f3n? \u00bfY por validaci\u00f3n?\n  - La verificaci\u00f3n es comprobar que el software cumple los requisitos funcionales y no funcionales de su especificaci\u00f3n\n  - La validaci\u00f3n es comprobar que el software cumple las caracteristicas del software  ### 6.Explica como funciona el modelo de desarrollo mediante creaci\u00f3n de prototipos.\nUn modelo prototipo o modelo de desarrollo evolutivo es utilizado principalmente en el desarrollo de software para ofrecer al usuario una visi\u00f3n previa de c\u00f3mo ser\u00e1 el programa o sistema. Se le dice de desarrollo evolutivo al modelo de prototipo porque evoluciona hasta convertirse en el producto final.\nEn un modelo de prototipos las caracter\u00edsticas fundamentales son:   Tiempo. El prototipo se desarrolla en menos tiempo para poder ser probado o testeado.  Coste. La inversi\u00f3n en un modelo de prototipo es ajustada, lo que requiere un uso \u00f3ptimo de los recursos.  Conciso. El prototipo debe incluir los requisitos y caracter\u00edsticas b\u00e1sicas de la aplicaci\u00f3n para poder evaluar su funcionamiento y utilidad.  Evolutivo. El prototipo evoluciona gracias a la interacci\u00f3n con los usuarios.  Funcional. El prototipo es una aplicaci\u00f3n que funciona.   ### 1.KANBAN. Haz un resumen de la metodolog\u00eda Kanban e indica sus diferencias frente a SCRUM. Puedes consultar el siguiente enlace.\n  Kanban utiliza un sistema de tarjetas en un tablero para organizar las tareas en \"To do\" \"Doing\" \"Done\",as\u00ed todos pueden ver el estado en que esta dicha   tarea y saber por donde debe empezar, ademas se controla por demanda. Las diferencias con Scrum son estas:\n  - En kanban no existen roles mientras que en scrum hace falta un el Product Owner y un Scrum Master, aparte del equipo de desarollo\n  - En Scrum se trabaja con iteraciones de tiempo fijo, con unos ciclos fijos que se denominan Sprints\n  - En Scrum los tableros se van a resetear al final de cada Sprint, es decir, conforme vamos finalizando el mismo, el tablero queda vac\u00edo y comenzamos de\nnuevo a\u00f1adir nueva nuevas historias de usuario, las siguientes en prioridad\n  - En Scrum se mide todo lo que sea necesario, se miden historias, es decir, se mide cu\u00e1nto tiempo o esfuerzo nos va a llevar realizar cada una de las     tareas y se mide tambi\u00e9n la velocidad del equipo, en Kanban no hace falta.\n  - En Scrum el conjunto de tareas que tenemos que realizar durante el Sprint, tiene que tener al menos el tama\u00f1o de un Sprint. En Kanban, al tener un ritmo de trabajo continuo, lo que se hace es ir arrastrando las nuevas tareas por el panel hasta que lleguen a su estado final y finalicen.  ### 2 SCRUM. Explica como funciona Scrum.\n  - Planificaci\u00f3n: El Product Backlog es la fase en la que se establecen las tareas prioritarias y donde se obtiene informaci\u00f3n breve y detallada sobre el proyecto que se va  a desarrollar.\n  - Ejecuci\u00f3n: Sprint: Dentro del m\u00e9todo Scrum, el Sprint es el coraz\u00f3n, un intervalo de tiempo que como m\u00e1ximo tiene una duraci\u00f3n de un mes y en donde se produce el desarrollo de un producto que es entregable potencialmente.\n  -Control: El Burn Down es la fase en la que se mide el progreso de un determinado proyecto Scrum. En ella, el Scrum Master ser\u00e1 el encargado de actualizar los gr\u00e1ficos cuando se finalice cada uno de los Sprint.  ### 3.SCRUM. Define los siguientes t\u00e9rminos:\n  - Product backlog: (o pila de producto) es un listado de todas las tareas que se pretenden hacer durante el desarrollo de un proyecto.   Sprint Backlog: es la suma de el Objetivo del Sprint, los elementos del Product Backlog elegidos para el Sprint, m\u00e1s un plan de acci\u00f3n de c\u00f3mo crear el     Incremento de Producto.   ### 4. SCRUM. En la terminolog\u00eda Scrum qu\u00e9 terminos se utilizan como sin\u00f3nimo de:\n - Jefe de proyecto: Scrum Master\n - Cliente: Product Owner\n - Equipo de desarrollo: Scrum Team  ### 5.SCRUM. Haz un resumen de los requisitos para poder utilizar Scrum.\n  - Cultura de empresa basada en trabajo en equipo, delegaci\u00f3n, creatividad y mejora continua.\n  - Compromiso del cliente en la direcci\u00f3n de los resultados del proyecto, gesti\u00f3n del ROI y disponibilidad para poder colaborar.\n  - Compromiso de la Direcci\u00f3n de la organizaci\u00f3n para resolver problemas end\u00e9micos y realizar cambios organizativos, formando equipos autogestionados y   multidisciplinares y fomentando una cultura de gesti\u00f3n basada en la colaboraci\u00f3n y en la facilitaci\u00f3n llevada a cabo por l\u00edderes al servicio del equipo.\n  -  Compromiso conjunto y colaboraci\u00f3n de los miembros del equipo.\n  -  Relaci\u00f3n entre proveedor y cliente basada en ganar-ganar, colaboraci\u00f3n y transparencia.\n  -  Facilidad para realizar cambios en el proyecto.\n  -  Tama\u00f1o de cada equipo entre 5 y 9 personas (con t\u00e9cnicas espec\u00edficas de planificaci\u00f3n y coordinaci\u00f3n cuando varios equipos trabajan en el mismo proyecto).\n  -  Equipo trabajando en un mismo espacio com\u00fan para maximizar la comunicaci\u00f3n.\n  -  Dedicaci\u00f3n del equipo a tiempo completo.\n  -  Estabilidad de los miembros del equipo  ### 6.XP. Explica los 5 valores de la Programaci\u00f3n Extrema.\n  - Comunicaci\u00f3n: Con objetivo de romper las cl\u00e1sicas barreras entre negocio y desarrollo, XP promueve que los requisitos sean comunicados y trabajados con el equipo de desarrollo mano a mano y no a trav\u00e9s de documentaci\u00f3n\n  - Simplicidad: La l\u00ednea de XP respecto a la complejidad de las soluciones es tajante: empezar con la soluci\u00f3n m\u00e1s simple. \u00bfSe podr\u00eda realizar alguna funcionalidad extra fuera de lo m\u00ednimo que da valor? Pues se realizar\u00e1 m\u00e1s tarde\n  - Feedback: De nuevo, comunicaci\u00f3n, y no solo con el cliente, sino en todas direcciones. Feedback es un valor constante en XP y gran parte de sus pr\u00e1cticas van en esta direcci\u00f3n.\n  - Coraje / Valentia: eXtreme Programming se considera una disciplina: un conjunto de pr\u00e1cticas que se compensan entre ellas bajo el mismo paraguas. Y para ser realmente \"extreme\" debes cumplirla todas,\n  - Respeto: Adem\u00e1s, XP promueve algo tan b\u00e1sico como el respeto  ### 7. XP. \u00bfCu\u00e1les son las caracter\u00edsticas distintivas de XP frente a otras metodolog\u00edas \u00e1giles? Expl\u00edcalas.\nEn otras metodolog\u00edas se recoge las buenas pr\u00e1cticas de un marco de trabajo espec\u00edfico. En ella, hay unos roles de equipo definidos y unas iteraciones que se van repitiendo cada semana o 3-5 semanas.\nLa metodolog\u00eda XP se centra en la comunicaci\u00f3n con todos los involucrados en el proyectos, as\u00ed como la reutilizaci\u00f3n del c\u00f3digo ya desarrollado y la realimentaci\u00f3n.",
            "title": "1.Define \"Ciclo de vida del software\"."
        },
        {
            "location": "/about/",
            "text": "Prueba\n\n\nSobre nosotros\n\n\n\n\nholaaa",
            "title": "About"
        },
        {
            "location": "/about/#prueba",
            "text": "",
            "title": "Prueba"
        },
        {
            "location": "/about/#sobre-nosotros",
            "text": "holaaa",
            "title": "Sobre nosotros"
        }
    ]
}